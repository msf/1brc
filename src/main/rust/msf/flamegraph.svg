<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="1398"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="0.0000%" y="629" width="0.1431%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="0.0000%" y="613" width="0.1431%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.14%)</title><rect x="0.0000%" y="597" width="0.1431%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="607.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.43%)</title><rect x="0.1431%" y="629" width="0.4292%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="6"/><text x="0.3931%" y="639.50"></text></g><g><title>_int_free (36 samples, 2.58%)</title><rect x="0.5722%" y="629" width="2.5751%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="36"/><text x="0.8222%" y="639.50">_i..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.36%)</title><rect x="3.1474%" y="629" width="0.3577%" height="15" fill="rgb(232,128,0)" fg:x="44" fg:w="5"/><text x="3.3974%" y="639.50"></text></g><g><title>[anon] (53 samples, 3.79%)</title><rect x="0.0000%" y="645" width="3.7911%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="53"/><text x="0.2500%" y="655.50">[ano..</text></g><g><title>core::slice::memchr::memchr_aligned (4 samples, 0.29%)</title><rect x="3.5050%" y="629" width="0.2861%" height="15" fill="rgb(228,23,34)" fg:x="49" fg:w="4"/><text x="3.7550%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="3.7911%" y="629" width="0.1431%" height="15" fill="rgb(218,30,26)" fg:x="53" fg:w="2"/><text x="4.0411%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.50%)</title><rect x="4.0773%" y="597" width="0.5007%" height="15" fill="rgb(220,122,19)" fg:x="57" fg:w="7"/><text x="4.3273%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.79%)</title><rect x="3.9342%" y="629" width="0.7868%" height="15" fill="rgb(250,228,42)" fg:x="55" fg:w="11"/><text x="4.1842%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (9 samples, 0.64%)</title><rect x="4.0773%" y="613" width="0.6438%" height="15" fill="rgb(240,193,28)" fg:x="57" fg:w="9"/><text x="4.3273%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.14%)</title><rect x="4.5780%" y="597" width="0.1431%" height="15" fill="rgb(216,20,37)" fg:x="64" fg:w="2"/><text x="4.8280%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.14%)</title><rect x="4.5780%" y="581" width="0.1431%" height="15" fill="rgb(206,188,39)" fg:x="64" fg:w="2"/><text x="4.8280%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.14%)</title><rect x="4.5780%" y="565" width="0.1431%" height="15" fill="rgb(217,207,13)" fg:x="64" fg:w="2"/><text x="4.8280%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2 samples, 0.14%)</title><rect x="4.5780%" y="549" width="0.1431%" height="15" fill="rgb(231,73,38)" fg:x="64" fg:w="2"/><text x="4.8280%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.14%)</title><rect x="4.5780%" y="533" width="0.1431%" height="15" fill="rgb(225,20,46)" fg:x="64" fg:w="2"/><text x="4.8280%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.14%)</title><rect x="4.5780%" y="517" width="0.1431%" height="15" fill="rgb(210,31,41)" fg:x="64" fg:w="2"/><text x="4.8280%" y="527.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.14%)</title><rect x="4.5780%" y="501" width="0.1431%" height="15" fill="rgb(221,200,47)" fg:x="64" fg:w="2"/><text x="4.8280%" y="511.50"></text></g><g><title>__GI___libc_free (22 samples, 1.57%)</title><rect x="4.7210%" y="629" width="1.5737%" height="15" fill="rgb(226,26,5)" fg:x="66" fg:w="22"/><text x="4.9710%" y="639.50"></text></g><g><title>__GI___libc_malloc (21 samples, 1.50%)</title><rect x="6.2947%" y="629" width="1.5021%" height="15" fill="rgb(249,33,26)" fg:x="88" fg:w="21"/><text x="6.5447%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (16 samples, 1.14%)</title><rect x="7.7969%" y="629" width="1.1445%" height="15" fill="rgb(235,183,28)" fg:x="109" fg:w="16"/><text x="8.0469%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.07%)</title><rect x="8.8698%" y="613" width="0.0715%" height="15" fill="rgb(221,5,38)" fg:x="124" fg:w="1"/><text x="9.1198%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.07%)</title><rect x="8.8698%" y="597" width="0.0715%" height="15" fill="rgb(247,18,42)" fg:x="124" fg:w="1"/><text x="9.1198%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.07%)</title><rect x="8.8698%" y="581" width="0.0715%" height="15" fill="rgb(241,131,45)" fg:x="124" fg:w="1"/><text x="9.1198%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.50%)</title><rect x="9.1559%" y="613" width="0.5007%" height="15" fill="rgb(249,31,29)" fg:x="128" fg:w="7"/><text x="9.4059%" y="623.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (12 samples, 0.86%)</title><rect x="8.9413%" y="629" width="0.8584%" height="15" fill="rgb(225,111,53)" fg:x="125" fg:w="12"/><text x="9.1913%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.14%)</title><rect x="9.6567%" y="613" width="0.1431%" height="15" fill="rgb(238,160,17)" fg:x="135" fg:w="2"/><text x="9.9067%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.14%)</title><rect x="9.6567%" y="597" width="0.1431%" height="15" fill="rgb(214,148,48)" fg:x="135" fg:w="2"/><text x="9.9067%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.14%)</title><rect x="9.6567%" y="581" width="0.1431%" height="15" fill="rgb(232,36,49)" fg:x="135" fg:w="2"/><text x="9.9067%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (2 samples, 0.14%)</title><rect x="9.6567%" y="565" width="0.1431%" height="15" fill="rgb(209,103,24)" fg:x="135" fg:w="2"/><text x="9.9067%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (2 samples, 0.14%)</title><rect x="9.6567%" y="549" width="0.1431%" height="15" fill="rgb(229,88,8)" fg:x="135" fg:w="2"/><text x="9.9067%" y="559.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (2 samples, 0.14%)</title><rect x="9.6567%" y="533" width="0.1431%" height="15" fill="rgb(213,181,19)" fg:x="135" fg:w="2"/><text x="9.9067%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (2 samples, 0.14%)</title><rect x="9.6567%" y="517" width="0.1431%" height="15" fill="rgb(254,191,54)" fg:x="135" fg:w="2"/><text x="9.9067%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.14%)</title><rect x="9.6567%" y="501" width="0.1431%" height="15" fill="rgb(241,83,37)" fg:x="135" fg:w="2"/><text x="9.9067%" y="511.50"></text></g><g><title>alloc::string::String::from_utf8 (5 samples, 0.36%)</title><rect x="9.9428%" y="597" width="0.3577%" height="15" fill="rgb(233,36,39)" fg:x="139" fg:w="5"/><text x="10.1928%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6 samples, 0.43%)</title><rect x="10.3004%" y="597" width="0.4292%" height="15" fill="rgb(226,3,54)" fg:x="144" fg:w="6"/><text x="10.5504%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6 samples, 0.43%)</title><rect x="10.3004%" y="581" width="0.4292%" height="15" fill="rgb(245,192,40)" fg:x="144" fg:w="6"/><text x="10.5504%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6 samples, 0.43%)</title><rect x="10.3004%" y="565" width="0.4292%" height="15" fill="rgb(238,167,29)" fg:x="144" fg:w="6"/><text x="10.5504%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.43%)</title><rect x="10.3004%" y="549" width="0.4292%" height="15" fill="rgb(232,182,51)" fg:x="144" fg:w="6"/><text x="10.5504%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.43%)</title><rect x="10.3004%" y="533" width="0.4292%" height="15" fill="rgb(231,60,39)" fg:x="144" fg:w="6"/><text x="10.5504%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.43%)</title><rect x="10.3004%" y="517" width="0.4292%" height="15" fill="rgb(208,69,12)" fg:x="144" fg:w="6"/><text x="10.5504%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.14%)</title><rect x="10.7296%" y="517" width="0.1431%" height="15" fill="rgb(235,93,37)" fg:x="150" fg:w="2"/><text x="10.9796%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.14%)</title><rect x="10.7296%" y="501" width="0.1431%" height="15" fill="rgb(213,116,39)" fg:x="150" fg:w="2"/><text x="10.9796%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2 samples, 0.14%)</title><rect x="10.7296%" y="485" width="0.1431%" height="15" fill="rgb(222,207,29)" fg:x="150" fg:w="2"/><text x="10.9796%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.14%)</title><rect x="10.7296%" y="469" width="0.1431%" height="15" fill="rgb(206,96,30)" fg:x="150" fg:w="2"/><text x="10.9796%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.14%)</title><rect x="10.7296%" y="453" width="0.1431%" height="15" fill="rgb(218,138,4)" fg:x="150" fg:w="2"/><text x="10.9796%" y="463.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.14%)</title><rect x="10.7296%" y="437" width="0.1431%" height="15" fill="rgb(250,191,14)" fg:x="150" fg:w="2"/><text x="10.9796%" y="447.50"></text></g><g><title>msf1brc::aggregator::parse (4 samples, 0.29%)</title><rect x="10.7296%" y="597" width="0.2861%" height="15" fill="rgb(239,60,40)" fg:x="150" fg:w="4"/><text x="10.9796%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.29%)</title><rect x="10.7296%" y="581" width="0.2861%" height="15" fill="rgb(206,27,48)" fg:x="150" fg:w="4"/><text x="10.9796%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.29%)</title><rect x="10.7296%" y="565" width="0.2861%" height="15" fill="rgb(225,35,8)" fg:x="150" fg:w="4"/><text x="10.9796%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.29%)</title><rect x="10.7296%" y="549" width="0.2861%" height="15" fill="rgb(250,213,24)" fg:x="150" fg:w="4"/><text x="10.9796%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.29%)</title><rect x="10.7296%" y="533" width="0.2861%" height="15" fill="rgb(247,123,22)" fg:x="150" fg:w="4"/><text x="10.9796%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.14%)</title><rect x="10.8727%" y="517" width="0.1431%" height="15" fill="rgb(231,138,38)" fg:x="152" fg:w="2"/><text x="11.1227%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.14%)</title><rect x="10.8727%" y="501" width="0.1431%" height="15" fill="rgb(231,145,46)" fg:x="152" fg:w="2"/><text x="11.1227%" y="511.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.07%)</title><rect x="11.0157%" y="597" width="0.0715%" height="15" fill="rgb(251,118,11)" fg:x="154" fg:w="1"/><text x="11.2657%" y="607.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (1 samples, 0.07%)</title><rect x="11.0157%" y="581" width="0.0715%" height="15" fill="rgb(217,147,25)" fg:x="154" fg:w="1"/><text x="11.2657%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (1 samples, 0.07%)</title><rect x="11.0157%" y="565" width="0.0715%" height="15" fill="rgb(247,81,37)" fg:x="154" fg:w="1"/><text x="11.2657%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::string::String,msf1brc::aggregator::Aggregate&gt;&gt; (1 samples, 0.07%)</title><rect x="11.0157%" y="549" width="0.0715%" height="15" fill="rgb(209,12,38)" fg:x="154" fg:w="1"/><text x="11.2657%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1 samples, 0.07%)</title><rect x="11.0157%" y="533" width="0.0715%" height="15" fill="rgb(227,1,9)" fg:x="154" fg:w="1"/><text x="11.2657%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.07%)</title><rect x="11.0157%" y="517" width="0.0715%" height="15" fill="rgb(248,47,43)" fg:x="154" fg:w="1"/><text x="11.2657%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.07%)</title><rect x="11.0157%" y="501" width="0.0715%" height="15" fill="rgb(221,10,30)" fg:x="154" fg:w="1"/><text x="11.2657%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.07%)</title><rect x="11.0157%" y="485" width="0.0715%" height="15" fill="rgb(210,229,1)" fg:x="154" fg:w="1"/><text x="11.2657%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="11.0157%" y="469" width="0.0715%" height="15" fill="rgb(222,148,37)" fg:x="154" fg:w="1"/><text x="11.2657%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.07%)</title><rect x="11.0157%" y="453" width="0.0715%" height="15" fill="rgb(234,67,33)" fg:x="154" fg:w="1"/><text x="11.2657%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.07%)</title><rect x="11.0157%" y="437" width="0.0715%" height="15" fill="rgb(247,98,35)" fg:x="154" fg:w="1"/><text x="11.2657%" y="447.50"></text></g><g><title>msf1brc::aggregator::MeasurementAggregator::process_chunk (20 samples, 1.43%)</title><rect x="9.7997%" y="629" width="1.4306%" height="15" fill="rgb(247,138,52)" fg:x="137" fg:w="20"/><text x="10.0497%" y="639.50"></text></g><g><title>msf1brc::aggregator::MeasurementAggregator::add (20 samples, 1.43%)</title><rect x="9.7997%" y="613" width="1.4306%" height="15" fill="rgb(213,79,30)" fg:x="137" fg:w="20"/><text x="10.0497%" y="623.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.14%)</title><rect x="11.0873%" y="597" width="0.1431%" height="15" fill="rgb(246,177,23)" fg:x="155" fg:w="2"/><text x="11.3373%" y="607.50"></text></g><g><title>[unknown] (128 samples, 9.16%)</title><rect x="3.7911%" y="645" width="9.1559%" height="15" fill="rgb(230,62,27)" fg:x="53" fg:w="128"/><text x="4.0411%" y="655.50">[unknown]</text></g><g><title>std::io::read_until (24 samples, 1.72%)</title><rect x="11.2303%" y="629" width="1.7167%" height="15" fill="rgb(216,154,8)" fg:x="157" fg:w="24"/><text x="11.4803%" y="639.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.07%)</title><rect x="12.8755%" y="613" width="0.0715%" height="15" fill="rgb(244,35,45)" fg:x="180" fg:w="1"/><text x="13.1255%" y="623.50"></text></g><g><title>__GI___libc_free (4 samples, 0.29%)</title><rect x="12.9471%" y="645" width="0.2861%" height="15" fill="rgb(251,115,12)" fg:x="181" fg:w="4"/><text x="13.1971%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="15.5222%" y="309" width="0.1431%" height="15" fill="rgb(240,54,50)" fg:x="217" fg:w="2"/><text x="15.7722%" y="319.50"></text></g><g><title>checked_request2size (3 samples, 0.21%)</title><rect x="17.3820%" y="229" width="0.2146%" height="15" fill="rgb(233,84,52)" fg:x="243" fg:w="3"/><text x="17.6320%" y="239.50"></text></g><g><title>__GI___libc_malloc (49 samples, 3.51%)</title><rect x="16.0944%" y="245" width="3.5050%" height="15" fill="rgb(207,117,47)" fg:x="225" fg:w="49"/><text x="16.3444%" y="255.50">__G..</text></g><g><title>tcache_get (28 samples, 2.00%)</title><rect x="17.5966%" y="229" width="2.0029%" height="15" fill="rgb(249,43,39)" fg:x="246" fg:w="28"/><text x="17.8466%" y="239.50">t..</text></g><g><title>__rdl_alloc (2 samples, 0.14%)</title><rect x="19.5994%" y="245" width="0.1431%" height="15" fill="rgb(209,38,44)" fg:x="274" fg:w="2"/><text x="19.8494%" y="255.50"></text></g><g><title>__rust_alloc (3 samples, 0.21%)</title><rect x="19.7425%" y="245" width="0.2146%" height="15" fill="rgb(236,212,23)" fg:x="276" fg:w="3"/><text x="19.9925%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (63 samples, 4.51%)</title><rect x="15.5222%" y="341" width="4.5064%" height="15" fill="rgb(242,79,21)" fg:x="217" fg:w="63"/><text x="15.7722%" y="351.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (63 samples, 4.51%)</title><rect x="15.5222%" y="325" width="4.5064%" height="15" fill="rgb(211,96,35)" fg:x="217" fg:w="63"/><text x="15.7722%" y="335.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (61 samples, 4.36%)</title><rect x="15.6652%" y="309" width="4.3634%" height="15" fill="rgb(253,215,40)" fg:x="219" fg:w="61"/><text x="15.9152%" y="319.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (58 samples, 4.15%)</title><rect x="15.8798%" y="293" width="4.1488%" height="15" fill="rgb(211,81,21)" fg:x="222" fg:w="58"/><text x="16.1298%" y="303.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (58 samples, 4.15%)</title><rect x="15.8798%" y="277" width="4.1488%" height="15" fill="rgb(208,190,38)" fg:x="222" fg:w="58"/><text x="16.1298%" y="287.50">alloc..</text></g><g><title>alloc::alloc::alloc (58 samples, 4.15%)</title><rect x="15.8798%" y="261" width="4.1488%" height="15" fill="rgb(235,213,38)" fg:x="222" fg:w="58"/><text x="16.1298%" y="271.50">alloc..</text></g><g><title>core::ptr::read_volatile (1 samples, 0.07%)</title><rect x="19.9571%" y="245" width="0.0715%" height="15" fill="rgb(237,122,38)" fg:x="279" fg:w="1"/><text x="20.2071%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (93 samples, 6.65%)</title><rect x="14.1631%" y="421" width="6.6524%" height="15" fill="rgb(244,218,35)" fg:x="198" fg:w="93"/><text x="14.4131%" y="431.50">&lt;alloc::s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (74 samples, 5.29%)</title><rect x="15.5222%" y="405" width="5.2933%" height="15" fill="rgb(240,68,47)" fg:x="217" fg:w="74"/><text x="15.7722%" y="415.50">&lt;alloc..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (74 samples, 5.29%)</title><rect x="15.5222%" y="389" width="5.2933%" height="15" fill="rgb(210,16,53)" fg:x="217" fg:w="74"/><text x="15.7722%" y="399.50">alloc:..</text></g><g><title>alloc::slice::hack::to_vec (74 samples, 5.29%)</title><rect x="15.5222%" y="373" width="5.2933%" height="15" fill="rgb(235,124,12)" fg:x="217" fg:w="74"/><text x="15.7722%" y="383.50">alloc:..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (74 samples, 5.29%)</title><rect x="15.5222%" y="357" width="5.2933%" height="15" fill="rgb(224,169,11)" fg:x="217" fg:w="74"/><text x="15.7722%" y="367.50">&lt;T as ..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11 samples, 0.79%)</title><rect x="20.0286%" y="341" width="0.7868%" height="15" fill="rgb(250,166,2)" fg:x="280" fg:w="11"/><text x="20.2786%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.79%)</title><rect x="20.0286%" y="325" width="0.7868%" height="15" fill="rgb(242,216,29)" fg:x="280" fg:w="11"/><text x="20.2786%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.64%)</title><rect x="20.1717%" y="309" width="0.6438%" height="15" fill="rgb(230,116,27)" fg:x="282" fg:w="9"/><text x="20.4217%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (8 samples, 0.57%)</title><rect x="22.6037%" y="389" width="0.5722%" height="15" fill="rgb(228,99,48)" fg:x="316" fg:w="8"/><text x="22.8537%" y="399.50"></text></g><g><title>alloc::string::String::from_utf8 (73 samples, 5.22%)</title><rect x="20.8155%" y="421" width="5.2217%" height="15" fill="rgb(253,11,6)" fg:x="291" fg:w="73"/><text x="21.0655%" y="431.50">alloc:..</text></g><g><title>core::str::converts::from_utf8 (67 samples, 4.79%)</title><rect x="21.2446%" y="405" width="4.7926%" height="15" fill="rgb(247,143,39)" fg:x="297" fg:w="67"/><text x="21.4946%" y="415.50">core::..</text></g><g><title>core::str::validations::run_utf8_validation (40 samples, 2.86%)</title><rect x="23.1760%" y="389" width="2.8612%" height="15" fill="rgb(236,97,10)" fg:x="324" fg:w="40"/><text x="23.4260%" y="399.50">co..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.07%)</title><rect x="25.9657%" y="373" width="0.0715%" height="15" fill="rgb(233,208,19)" fg:x="363" fg:w="1"/><text x="26.2157%" y="383.50"></text></g><g><title>_int_free (17 samples, 1.22%)</title><rect x="26.6810%" y="309" width="1.2160%" height="15" fill="rgb(216,164,2)" fg:x="373" fg:w="17"/><text x="26.9310%" y="319.50"></text></g><g><title>tcache_put (3 samples, 0.21%)</title><rect x="27.6824%" y="293" width="0.2146%" height="15" fill="rgb(220,129,5)" fg:x="387" fg:w="3"/><text x="27.9324%" y="303.50"></text></g><g><title>__GI___libc_free (32 samples, 2.29%)</title><rect x="26.0372%" y="325" width="2.2890%" height="15" fill="rgb(242,17,10)" fg:x="364" fg:w="32"/><text x="26.2872%" y="335.50">_..</text></g><g><title>arena_for_chunk (6 samples, 0.43%)</title><rect x="27.8970%" y="309" width="0.4292%" height="15" fill="rgb(242,107,0)" fg:x="390" fg:w="6"/><text x="28.1470%" y="319.50"></text></g><g><title>arena_for_chunk (6 samples, 0.43%)</title><rect x="27.8970%" y="293" width="0.4292%" height="15" fill="rgb(251,28,31)" fg:x="390" fg:w="6"/><text x="28.1470%" y="303.50"></text></g><g><title>heap_for_ptr (6 samples, 0.43%)</title><rect x="27.8970%" y="277" width="0.4292%" height="15" fill="rgb(233,223,10)" fg:x="390" fg:w="6"/><text x="28.1470%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (33 samples, 2.36%)</title><rect x="26.0372%" y="357" width="2.3605%" height="15" fill="rgb(215,21,27)" fg:x="364" fg:w="33"/><text x="26.2872%" y="367.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (33 samples, 2.36%)</title><rect x="26.0372%" y="341" width="2.3605%" height="15" fill="rgb(232,23,21)" fg:x="364" fg:w="33"/><text x="26.2872%" y="351.50">al..</text></g><g><title>__rust_dealloc (1 samples, 0.07%)</title><rect x="28.3262%" y="325" width="0.0715%" height="15" fill="rgb(244,5,23)" fg:x="396" fg:w="1"/><text x="28.5762%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (34 samples, 2.43%)</title><rect x="26.0372%" y="421" width="2.4320%" height="15" fill="rgb(226,81,46)" fg:x="364" fg:w="34"/><text x="26.2872%" y="431.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (34 samples, 2.43%)</title><rect x="26.0372%" y="405" width="2.4320%" height="15" fill="rgb(247,70,30)" fg:x="364" fg:w="34"/><text x="26.2872%" y="415.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (34 samples, 2.43%)</title><rect x="26.0372%" y="389" width="2.4320%" height="15" fill="rgb(212,68,19)" fg:x="364" fg:w="34"/><text x="26.2872%" y="399.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 2.43%)</title><rect x="26.0372%" y="373" width="2.4320%" height="15" fill="rgb(240,187,13)" fg:x="364" fg:w="34"/><text x="26.2872%" y="383.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.07%)</title><rect x="28.3977%" y="357" width="0.0715%" height="15" fill="rgb(223,113,26)" fg:x="397" fg:w="1"/><text x="28.6477%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (2 samples, 0.14%)</title><rect x="28.4692%" y="421" width="0.1431%" height="15" fill="rgb(206,192,2)" fg:x="398" fg:w="2"/><text x="28.7192%" y="431.50"></text></g><g><title>msf1brc::aggregator::MeasurementAggregator::process_chunk (3 samples, 0.21%)</title><rect x="28.6123%" y="421" width="0.2146%" height="15" fill="rgb(241,108,4)" fg:x="400" fg:w="3"/><text x="28.8623%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.21%)</title><rect x="29.8283%" y="405" width="0.2146%" height="15" fill="rgb(247,173,49)" fg:x="417" fg:w="3"/><text x="30.0783%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.21%)</title><rect x="29.8283%" y="389" width="0.2146%" height="15" fill="rgb(224,114,35)" fg:x="417" fg:w="3"/><text x="30.0783%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.21%)</title><rect x="29.8283%" y="373" width="0.2146%" height="15" fill="rgb(245,159,27)" fg:x="417" fg:w="3"/><text x="30.0783%" y="383.50"></text></g><g><title>checked_request2size (1 samples, 0.07%)</title><rect x="30.6152%" y="229" width="0.0715%" height="15" fill="rgb(245,172,44)" fg:x="428" fg:w="1"/><text x="30.8652%" y="239.50"></text></g><g><title>__GI___libc_malloc (22 samples, 1.57%)</title><rect x="30.3290%" y="245" width="1.5737%" height="15" fill="rgb(236,23,11)" fg:x="424" fg:w="22"/><text x="30.5790%" y="255.50"></text></g><g><title>tcache_get (17 samples, 1.22%)</title><rect x="30.6867%" y="229" width="1.2160%" height="15" fill="rgb(205,117,38)" fg:x="429" fg:w="17"/><text x="30.9367%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.07%)</title><rect x="31.9027%" y="245" width="0.0715%" height="15" fill="rgb(237,72,25)" fg:x="446" fg:w="1"/><text x="32.1527%" y="255.50"></text></g><g><title>__rust_alloc (4 samples, 0.29%)</title><rect x="31.9742%" y="245" width="0.2861%" height="15" fill="rgb(244,70,9)" fg:x="447" fg:w="4"/><text x="32.2242%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (36 samples, 2.58%)</title><rect x="30.0429%" y="341" width="2.5751%" height="15" fill="rgb(217,125,39)" fg:x="420" fg:w="36"/><text x="30.2929%" y="351.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (36 samples, 2.58%)</title><rect x="30.0429%" y="325" width="2.5751%" height="15" fill="rgb(235,36,10)" fg:x="420" fg:w="36"/><text x="30.2929%" y="335.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (36 samples, 2.58%)</title><rect x="30.0429%" y="309" width="2.5751%" height="15" fill="rgb(251,123,47)" fg:x="420" fg:w="36"/><text x="30.2929%" y="319.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 2.36%)</title><rect x="30.2575%" y="293" width="2.3605%" height="15" fill="rgb(221,13,13)" fg:x="423" fg:w="33"/><text x="30.5075%" y="303.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 2.36%)</title><rect x="30.2575%" y="277" width="2.3605%" height="15" fill="rgb(238,131,9)" fg:x="423" fg:w="33"/><text x="30.5075%" y="287.50">al..</text></g><g><title>alloc::alloc::alloc (33 samples, 2.36%)</title><rect x="30.2575%" y="261" width="2.3605%" height="15" fill="rgb(211,50,8)" fg:x="423" fg:w="33"/><text x="30.5075%" y="271.50">al..</text></g><g><title>core::ptr::read_volatile (5 samples, 0.36%)</title><rect x="32.2604%" y="245" width="0.3577%" height="15" fill="rgb(245,182,24)" fg:x="451" fg:w="5"/><text x="32.5104%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (49 samples, 3.51%)</title><rect x="30.0429%" y="405" width="3.5050%" height="15" fill="rgb(242,14,37)" fg:x="420" fg:w="49"/><text x="30.2929%" y="415.50">all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (49 samples, 3.51%)</title><rect x="30.0429%" y="389" width="3.5050%" height="15" fill="rgb(246,228,12)" fg:x="420" fg:w="49"/><text x="30.2929%" y="399.50">all..</text></g><g><title>alloc::slice::hack::to_vec (49 samples, 3.51%)</title><rect x="30.0429%" y="373" width="3.5050%" height="15" fill="rgb(213,55,15)" fg:x="420" fg:w="49"/><text x="30.2929%" y="383.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (49 samples, 3.51%)</title><rect x="30.0429%" y="357" width="3.5050%" height="15" fill="rgb(209,9,3)" fg:x="420" fg:w="49"/><text x="30.2929%" y="367.50">&lt;T ..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.93%)</title><rect x="32.6180%" y="341" width="0.9299%" height="15" fill="rgb(230,59,30)" fg:x="456" fg:w="13"/><text x="32.8680%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.93%)</title><rect x="32.6180%" y="325" width="0.9299%" height="15" fill="rgb(209,121,21)" fg:x="456" fg:w="13"/><text x="32.8680%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.64%)</title><rect x="32.9041%" y="309" width="0.6438%" height="15" fill="rgb(220,109,13)" fg:x="460" fg:w="9"/><text x="33.1541%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.36%)</title><rect x="34.6209%" y="325" width="0.3577%" height="15" fill="rgb(232,18,1)" fg:x="484" fg:w="5"/><text x="34.8709%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.14%)</title><rect x="35.4793%" y="277" width="0.1431%" height="15" fill="rgb(215,41,42)" fg:x="496" fg:w="2"/><text x="35.7293%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.72%)</title><rect x="35.1931%" y="309" width="0.7153%" height="15" fill="rgb(224,123,36)" fg:x="492" fg:w="10"/><text x="35.4431%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (9 samples, 0.64%)</title><rect x="35.2647%" y="293" width="0.6438%" height="15" fill="rgb(240,125,3)" fg:x="493" fg:w="9"/><text x="35.5147%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (4 samples, 0.29%)</title><rect x="35.6223%" y="277" width="0.2861%" height="15" fill="rgb(205,98,50)" fg:x="498" fg:w="4"/><text x="35.8723%" y="287.50"></text></g><g><title>msf1brc::aggregator::parse::_{{closure}} (4 samples, 0.29%)</title><rect x="35.6223%" y="261" width="0.2861%" height="15" fill="rgb(205,185,37)" fg:x="498" fg:w="4"/><text x="35.8723%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.07%)</title><rect x="35.9084%" y="309" width="0.0715%" height="15" fill="rgb(238,207,15)" fg:x="502" fg:w="1"/><text x="36.1584%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (22 samples, 1.57%)</title><rect x="34.6209%" y="341" width="1.5737%" height="15" fill="rgb(213,199,42)" fg:x="484" fg:w="22"/><text x="34.8709%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (17 samples, 1.22%)</title><rect x="34.9785%" y="325" width="1.2160%" height="15" fill="rgb(235,201,11)" fg:x="489" fg:w="17"/><text x="35.2285%" y="335.50"></text></g><g><title>core::ptr::write (3 samples, 0.21%)</title><rect x="35.9800%" y="309" width="0.2146%" height="15" fill="rgb(207,46,11)" fg:x="503" fg:w="3"/><text x="36.2300%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.93%)</title><rect x="39.0558%" y="309" width="0.9299%" height="15" fill="rgb(241,35,35)" fg:x="546" fg:w="13"/><text x="39.3058%" y="319.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.36%)</title><rect x="39.6280%" y="293" width="0.3577%" height="15" fill="rgb(243,32,47)" fg:x="554" fg:w="5"/><text x="39.8780%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (58 samples, 4.15%)</title><rect x="36.6953%" y="325" width="4.1488%" height="15" fill="rgb(247,202,23)" fg:x="513" fg:w="58"/><text x="36.9453%" y="335.50">&lt;core..</text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (12 samples, 0.86%)</title><rect x="39.9857%" y="309" width="0.8584%" height="15" fill="rgb(219,102,11)" fg:x="559" fg:w="12"/><text x="40.2357%" y="319.50"></text></g><g><title>msf1brc::aggregator::parse::_{{closure}} (12 samples, 0.86%)</title><rect x="39.9857%" y="293" width="0.8584%" height="15" fill="rgb(243,110,44)" fg:x="559" fg:w="12"/><text x="40.2357%" y="303.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.36%)</title><rect x="40.8441%" y="325" width="0.3577%" height="15" fill="rgb(222,74,54)" fg:x="571" fg:w="5"/><text x="41.0941%" y="335.50"></text></g><g><title>sysvec_apic_timer_interrupt (5 samples, 0.36%)</title><rect x="40.8441%" y="309" width="0.3577%" height="15" fill="rgb(216,99,12)" fg:x="571" fg:w="5"/><text x="41.0941%" y="319.50"></text></g><g><title>irqentry_exit (5 samples, 0.36%)</title><rect x="40.8441%" y="293" width="0.3577%" height="15" fill="rgb(226,22,26)" fg:x="571" fg:w="5"/><text x="41.0941%" y="303.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.36%)</title><rect x="40.8441%" y="277" width="0.3577%" height="15" fill="rgb(217,163,10)" fg:x="571" fg:w="5"/><text x="41.0941%" y="287.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.36%)</title><rect x="40.8441%" y="261" width="0.3577%" height="15" fill="rgb(213,25,53)" fg:x="571" fg:w="5"/><text x="41.0941%" y="271.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.36%)</title><rect x="40.8441%" y="245" width="0.3577%" height="15" fill="rgb(252,105,26)" fg:x="571" fg:w="5"/><text x="41.0941%" y="255.50"></text></g><g><title>schedule (5 samples, 0.36%)</title><rect x="40.8441%" y="229" width="0.3577%" height="15" fill="rgb(220,39,43)" fg:x="571" fg:w="5"/><text x="41.0941%" y="239.50"></text></g><g><title>__schedule (5 samples, 0.36%)</title><rect x="40.8441%" y="213" width="0.3577%" height="15" fill="rgb(229,68,48)" fg:x="571" fg:w="5"/><text x="41.0941%" y="223.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.36%)</title><rect x="40.8441%" y="197" width="0.3577%" height="15" fill="rgb(252,8,32)" fg:x="571" fg:w="5"/><text x="41.0941%" y="207.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.36%)</title><rect x="40.8441%" y="181" width="0.3577%" height="15" fill="rgb(223,20,43)" fg:x="571" fg:w="5"/><text x="41.0941%" y="191.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.36%)</title><rect x="40.8441%" y="165" width="0.3577%" height="15" fill="rgb(229,81,49)" fg:x="571" fg:w="5"/><text x="41.0941%" y="175.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.36%)</title><rect x="40.8441%" y="149" width="0.3577%" height="15" fill="rgb(236,28,36)" fg:x="571" fg:w="5"/><text x="41.0941%" y="159.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.36%)</title><rect x="40.8441%" y="133" width="0.3577%" height="15" fill="rgb(249,185,26)" fg:x="571" fg:w="5"/><text x="41.0941%" y="143.50"></text></g><g><title>native_write_msr (5 samples, 0.36%)</title><rect x="40.8441%" y="117" width="0.3577%" height="15" fill="rgb(249,174,33)" fg:x="571" fg:w="5"/><text x="41.0941%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 6.65%)</title><rect x="36.1946%" y="341" width="6.6524%" height="15" fill="rgb(233,201,37)" fg:x="506" fg:w="93"/><text x="36.4446%" y="351.50">&lt;core::sl..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (23 samples, 1.65%)</title><rect x="41.2017%" y="325" width="1.6452%" height="15" fill="rgb(221,78,26)" fg:x="576" fg:w="23"/><text x="41.4517%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (23 samples, 1.65%)</title><rect x="41.2017%" y="309" width="1.6452%" height="15" fill="rgb(250,127,30)" fg:x="576" fg:w="23"/><text x="41.4517%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (23 samples, 1.65%)</title><rect x="41.2017%" y="293" width="1.6452%" height="15" fill="rgb(230,49,44)" fg:x="576" fg:w="23"/><text x="41.4517%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (23 samples, 1.65%)</title><rect x="41.2017%" y="277" width="1.6452%" height="15" fill="rgb(229,67,23)" fg:x="576" fg:w="23"/><text x="41.4517%" y="287.50"></text></g><g><title>checked_request2size (4 samples, 0.29%)</title><rect x="44.9213%" y="213" width="0.2861%" height="15" fill="rgb(249,83,47)" fg:x="628" fg:w="4"/><text x="45.1713%" y="223.50"></text></g><g><title>__GI___libc_malloc (66 samples, 4.72%)</title><rect x="42.8469%" y="229" width="4.7210%" height="15" fill="rgb(215,43,3)" fg:x="599" fg:w="66"/><text x="43.0969%" y="239.50">__GI__..</text></g><g><title>tcache_get (33 samples, 2.36%)</title><rect x="45.2074%" y="213" width="2.3605%" height="15" fill="rgb(238,154,13)" fg:x="632" fg:w="33"/><text x="45.4574%" y="223.50">tc..</text></g><g><title>__rdl_alloc (3 samples, 0.21%)</title><rect x="47.5680%" y="229" width="0.2146%" height="15" fill="rgb(219,56,2)" fg:x="665" fg:w="3"/><text x="47.8180%" y="239.50"></text></g><g><title>__rust_alloc (3 samples, 0.21%)</title><rect x="47.7825%" y="229" width="0.2146%" height="15" fill="rgb(233,0,4)" fg:x="668" fg:w="3"/><text x="48.0325%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (78 samples, 5.58%)</title><rect x="42.8469%" y="341" width="5.5794%" height="15" fill="rgb(235,30,7)" fg:x="599" fg:w="78"/><text x="43.0969%" y="351.50">alloc::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (78 samples, 5.58%)</title><rect x="42.8469%" y="325" width="5.5794%" height="15" fill="rgb(250,79,13)" fg:x="599" fg:w="78"/><text x="43.0969%" y="335.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (78 samples, 5.58%)</title><rect x="42.8469%" y="309" width="5.5794%" height="15" fill="rgb(211,146,34)" fg:x="599" fg:w="78"/><text x="43.0969%" y="319.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (78 samples, 5.58%)</title><rect x="42.8469%" y="293" width="5.5794%" height="15" fill="rgb(228,22,38)" fg:x="599" fg:w="78"/><text x="43.0969%" y="303.50">alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (78 samples, 5.58%)</title><rect x="42.8469%" y="277" width="5.5794%" height="15" fill="rgb(235,168,5)" fg:x="599" fg:w="78"/><text x="43.0969%" y="287.50">&lt;alloc:..</text></g><g><title>alloc::alloc::Global::alloc_impl (78 samples, 5.58%)</title><rect x="42.8469%" y="261" width="5.5794%" height="15" fill="rgb(221,155,16)" fg:x="599" fg:w="78"/><text x="43.0969%" y="271.50">alloc::..</text></g><g><title>alloc::alloc::alloc (78 samples, 5.58%)</title><rect x="42.8469%" y="245" width="5.5794%" height="15" fill="rgb(215,215,53)" fg:x="599" fg:w="78"/><text x="43.0969%" y="255.50">alloc::..</text></g><g><title>core::ptr::read_volatile (6 samples, 0.43%)</title><rect x="47.9971%" y="229" width="0.4292%" height="15" fill="rgb(223,4,10)" fg:x="671" fg:w="6"/><text x="48.2471%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (209 samples, 14.95%)</title><rect x="33.6195%" y="373" width="14.9499%" height="15" fill="rgb(234,103,6)" fg:x="470" fg:w="209"/><text x="33.8695%" y="383.50">&lt;alloc::vec::Vec&lt;T&gt; as ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (209 samples, 14.95%)</title><rect x="33.6195%" y="357" width="14.9499%" height="15" fill="rgb(227,97,0)" fg:x="470" fg:w="209"/><text x="33.8695%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as ..</text></g><g><title>core::ptr::write (2 samples, 0.14%)</title><rect x="48.4263%" y="341" width="0.1431%" height="15" fill="rgb(234,150,53)" fg:x="677" fg:w="2"/><text x="48.6763%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (211 samples, 15.09%)</title><rect x="33.5479%" y="405" width="15.0930%" height="15" fill="rgb(228,201,54)" fg:x="469" fg:w="211"/><text x="33.7979%" y="415.50">core::iter::traits::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (211 samples, 15.09%)</title><rect x="33.5479%" y="389" width="15.0930%" height="15" fill="rgb(222,22,37)" fg:x="469" fg:w="211"/><text x="33.7979%" y="399.50">&lt;alloc::vec::Vec&lt;T&gt; as ..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="48.5694%" y="373" width="0.0715%" height="15" fill="rgb(237,53,32)" fg:x="679" fg:w="1"/><text x="48.8194%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="48.5694%" y="357" width="0.0715%" height="15" fill="rgb(233,25,53)" fg:x="679" fg:w="1"/><text x="48.8194%" y="367.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="48.5694%" y="341" width="0.0715%" height="15" fill="rgb(210,40,34)" fg:x="679" fg:w="1"/><text x="48.8194%" y="351.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.07%)</title><rect x="48.5694%" y="325" width="0.0715%" height="15" fill="rgb(241,220,44)" fg:x="679" fg:w="1"/><text x="48.8194%" y="335.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.07%)</title><rect x="48.5694%" y="309" width="0.0715%" height="15" fill="rgb(235,28,35)" fg:x="679" fg:w="1"/><text x="48.8194%" y="319.50"></text></g><g><title>tick_sched_timer (1 samples, 0.07%)</title><rect x="48.5694%" y="293" width="0.0715%" height="15" fill="rgb(210,56,17)" fg:x="679" fg:w="1"/><text x="48.8194%" y="303.50"></text></g><g><title>tick_sched_handle (1 samples, 0.07%)</title><rect x="48.5694%" y="277" width="0.0715%" height="15" fill="rgb(224,130,29)" fg:x="679" fg:w="1"/><text x="48.8194%" y="287.50"></text></g><g><title>update_process_times (1 samples, 0.07%)</title><rect x="48.5694%" y="261" width="0.0715%" height="15" fill="rgb(235,212,8)" fg:x="679" fg:w="1"/><text x="48.8194%" y="271.50"></text></g><g><title>scheduler_tick (1 samples, 0.07%)</title><rect x="48.5694%" y="245" width="0.0715%" height="15" fill="rgb(223,33,50)" fg:x="679" fg:w="1"/><text x="48.8194%" y="255.50"></text></g><g><title>update_load_avg (1 samples, 0.07%)</title><rect x="48.5694%" y="229" width="0.0715%" height="15" fill="rgb(219,149,13)" fg:x="679" fg:w="1"/><text x="48.8194%" y="239.50"></text></g><g><title>_int_free (68 samples, 4.86%)</title><rect x="49.6423%" y="309" width="4.8641%" height="15" fill="rgb(250,156,29)" fg:x="694" fg:w="68"/><text x="49.8923%" y="319.50">_int_f..</text></g><g><title>tcache_put (38 samples, 2.72%)</title><rect x="51.7883%" y="293" width="2.7182%" height="15" fill="rgb(216,193,19)" fg:x="724" fg:w="38"/><text x="52.0383%" y="303.50">tc..</text></g><g><title>__GI___libc_free (79 samples, 5.65%)</title><rect x="49.2132%" y="325" width="5.6509%" height="15" fill="rgb(216,135,14)" fg:x="688" fg:w="79"/><text x="49.4632%" y="335.50">__GI___..</text></g><g><title>arena_for_chunk (5 samples, 0.36%)</title><rect x="54.5064%" y="309" width="0.3577%" height="15" fill="rgb(241,47,5)" fg:x="762" fg:w="5"/><text x="54.7564%" y="319.50"></text></g><g><title>arena_for_chunk (5 samples, 0.36%)</title><rect x="54.5064%" y="293" width="0.3577%" height="15" fill="rgb(233,42,35)" fg:x="762" fg:w="5"/><text x="54.7564%" y="303.50"></text></g><g><title>heap_for_ptr (4 samples, 0.29%)</title><rect x="54.5780%" y="277" width="0.2861%" height="15" fill="rgb(231,13,6)" fg:x="763" fg:w="4"/><text x="54.8280%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;[u8]&gt;&gt; (91 samples, 6.51%)</title><rect x="48.6409%" y="405" width="6.5093%" height="15" fill="rgb(207,181,40)" fg:x="680" fg:w="91"/><text x="48.8909%" y="415.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;[u8]&gt;&gt; (91 samples, 6.51%)</title><rect x="48.6409%" y="389" width="6.5093%" height="15" fill="rgb(254,173,49)" fg:x="680" fg:w="91"/><text x="48.8909%" y="399.50">core::ptr..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (91 samples, 6.51%)</title><rect x="48.6409%" y="373" width="6.5093%" height="15" fill="rgb(221,1,38)" fg:x="680" fg:w="91"/><text x="48.8909%" y="383.50">&lt;alloc::r..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (89 samples, 6.37%)</title><rect x="48.7840%" y="357" width="6.3662%" height="15" fill="rgb(206,124,46)" fg:x="682" fg:w="89"/><text x="49.0340%" y="367.50">&lt;alloc::..</text></g><g><title>alloc::alloc::dealloc (89 samples, 6.37%)</title><rect x="48.7840%" y="341" width="6.3662%" height="15" fill="rgb(249,21,11)" fg:x="682" fg:w="89"/><text x="49.0340%" y="351.50">alloc::a..</text></g><g><title>__rust_dealloc (4 samples, 0.29%)</title><rect x="54.8641%" y="325" width="0.2861%" height="15" fill="rgb(222,201,40)" fg:x="767" fg:w="4"/><text x="55.1141%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split (2 samples, 0.14%)</title><rect x="55.1502%" y="405" width="0.1431%" height="15" fill="rgb(235,61,29)" fg:x="771" fg:w="2"/><text x="55.4002%" y="415.50"></text></g><g><title>core::slice::iter::Split&lt;T,P&gt;::new (2 samples, 0.14%)</title><rect x="55.1502%" y="389" width="0.1431%" height="15" fill="rgb(219,207,3)" fg:x="771" fg:w="2"/><text x="55.4002%" y="399.50"></text></g><g><title>msf1brc::aggregator::MeasurementAggregator::process_chunk (8 samples, 0.57%)</title><rect x="55.2933%" y="405" width="0.5722%" height="15" fill="rgb(222,56,46)" fg:x="773" fg:w="8"/><text x="55.5433%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.21%)</title><rect x="57.6538%" y="373" width="0.2146%" height="15" fill="rgb(239,76,54)" fg:x="806" fg:w="3"/><text x="57.9038%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.21%)</title><rect x="57.6538%" y="357" width="0.2146%" height="15" fill="rgb(231,124,27)" fg:x="806" fg:w="3"/><text x="57.9038%" y="367.50"></text></g><g><title>msf1brc::aggregator::parse (414 samples, 29.61%)</title><rect x="28.8269%" y="421" width="29.6137%" height="15" fill="rgb(249,195,6)" fg:x="403" fg:w="414"/><text x="29.0769%" y="431.50">msf1brc::aggregator::parse</text></g><g><title>msf1brc::aggregator::parsei32 (36 samples, 2.58%)</title><rect x="55.8655%" y="405" width="2.5751%" height="15" fill="rgb(237,174,47)" fg:x="781" fg:w="36"/><text x="56.1155%" y="415.50">ms..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.79%)</title><rect x="57.6538%" y="389" width="0.7868%" height="15" fill="rgb(206,201,31)" fg:x="806" fg:w="11"/><text x="57.9038%" y="399.50"></text></g><g><title>msf1brc::aggregator::MeasurementAggregator::process_chunk (8 samples, 0.57%)</title><rect x="57.8684%" y="373" width="0.5722%" height="15" fill="rgb(231,57,52)" fg:x="809" fg:w="8"/><text x="58.1184%" y="383.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.14%)</title><rect x="58.5837%" y="373" width="0.1431%" height="15" fill="rgb(248,177,22)" fg:x="819" fg:w="2"/><text x="58.8337%" y="383.50"></text></g><g><title>msf1brc::aggregator::MeasurementAggregator::process_chunk (2 samples, 0.14%)</title><rect x="58.5837%" y="357" width="0.1431%" height="15" fill="rgb(215,211,37)" fg:x="819" fg:w="2"/><text x="58.8337%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (6 samples, 0.43%)</title><rect x="58.4406%" y="421" width="0.4292%" height="15" fill="rgb(241,128,51)" fg:x="817" fg:w="6"/><text x="58.6906%" y="431.50"></text></g><g><title>msf1brc::aggregator::MeasurementAggregator::add::_{{closure}} (6 samples, 0.43%)</title><rect x="58.4406%" y="405" width="0.4292%" height="15" fill="rgb(227,165,31)" fg:x="817" fg:w="6"/><text x="58.6906%" y="415.50"></text></g><g><title>msf1brc::aggregator::Aggregate::add (6 samples, 0.43%)</title><rect x="58.4406%" y="389" width="0.4292%" height="15" fill="rgb(228,167,24)" fg:x="817" fg:w="6"/><text x="58.6906%" y="399.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.14%)</title><rect x="58.7268%" y="373" width="0.1431%" height="15" fill="rgb(228,143,12)" fg:x="821" fg:w="2"/><text x="58.9768%" y="383.50"></text></g><g><title>msf1brc::aggregator::MeasurementAggregator::process_chunk (2 samples, 0.14%)</title><rect x="58.7268%" y="357" width="0.1431%" height="15" fill="rgb(249,149,8)" fg:x="821" fg:w="2"/><text x="58.9768%" y="367.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="61.6595%" y="213" width="0.0715%" height="15" fill="rgb(243,35,44)" fg:x="862" fg:w="1"/><text x="61.9095%" y="223.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.07%)</title><rect x="61.6595%" y="197" width="0.0715%" height="15" fill="rgb(246,89,9)" fg:x="862" fg:w="1"/><text x="61.9095%" y="207.50"></text></g><g><title>irqentry_exit (1 samples, 0.07%)</title><rect x="61.6595%" y="181" width="0.0715%" height="15" fill="rgb(233,213,13)" fg:x="862" fg:w="1"/><text x="61.9095%" y="191.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.07%)</title><rect x="61.6595%" y="165" width="0.0715%" height="15" fill="rgb(233,141,41)" fg:x="862" fg:w="1"/><text x="61.9095%" y="175.50"></text></g><g><title>_int_free (31 samples, 2.22%)</title><rect x="59.7282%" y="229" width="2.2175%" height="15" fill="rgb(239,167,4)" fg:x="835" fg:w="31"/><text x="59.9782%" y="239.50">_..</text></g><g><title>tcache_put (3 samples, 0.21%)</title><rect x="61.7310%" y="213" width="0.2146%" height="15" fill="rgb(209,217,16)" fg:x="863" fg:w="3"/><text x="61.9810%" y="223.50"></text></g><g><title>__GI___libc_free (46 samples, 3.29%)</title><rect x="59.1559%" y="245" width="3.2904%" height="15" fill="rgb(219,88,35)" fg:x="827" fg:w="46"/><text x="59.4059%" y="255.50">__G..</text></g><g><title>arena_for_chunk (7 samples, 0.50%)</title><rect x="61.9456%" y="229" width="0.5007%" height="15" fill="rgb(220,193,23)" fg:x="866" fg:w="7"/><text x="62.1956%" y="239.50"></text></g><g><title>arena_for_chunk (7 samples, 0.50%)</title><rect x="61.9456%" y="213" width="0.5007%" height="15" fill="rgb(230,90,52)" fg:x="866" fg:w="7"/><text x="62.1956%" y="223.50"></text></g><g><title>heap_for_ptr (7 samples, 0.50%)</title><rect x="61.9456%" y="197" width="0.5007%" height="15" fill="rgb(252,106,19)" fg:x="866" fg:w="7"/><text x="62.1956%" y="207.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (51 samples, 3.65%)</title><rect x="58.8698%" y="421" width="3.6481%" height="15" fill="rgb(206,74,20)" fg:x="823" fg:w="51"/><text x="59.1198%" y="431.50">std:..</text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (51 samples, 3.65%)</title><rect x="58.8698%" y="405" width="3.6481%" height="15" fill="rgb(230,138,44)" fg:x="823" fg:w="51"/><text x="59.1198%" y="415.50">std:..</text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (51 samples, 3.65%)</title><rect x="58.8698%" y="389" width="3.6481%" height="15" fill="rgb(235,182,43)" fg:x="823" fg:w="51"/><text x="59.1198%" y="399.50">hash..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::string::String,msf1brc::aggregator::Aggregate&gt;&gt; (51 samples, 3.65%)</title><rect x="58.8698%" y="373" width="3.6481%" height="15" fill="rgb(242,16,51)" fg:x="823" fg:w="51"/><text x="59.1198%" y="383.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (51 samples, 3.65%)</title><rect x="58.8698%" y="357" width="3.6481%" height="15" fill="rgb(248,9,4)" fg:x="823" fg:w="51"/><text x="59.1198%" y="367.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (48 samples, 3.43%)</title><rect x="59.0844%" y="341" width="3.4335%" height="15" fill="rgb(210,31,22)" fg:x="826" fg:w="48"/><text x="59.3344%" y="351.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (48 samples, 3.43%)</title><rect x="59.0844%" y="325" width="3.4335%" height="15" fill="rgb(239,54,39)" fg:x="826" fg:w="48"/><text x="59.3344%" y="335.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (48 samples, 3.43%)</title><rect x="59.0844%" y="309" width="3.4335%" height="15" fill="rgb(230,99,41)" fg:x="826" fg:w="48"/><text x="59.3344%" y="319.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 3.43%)</title><rect x="59.0844%" y="293" width="3.4335%" height="15" fill="rgb(253,106,12)" fg:x="826" fg:w="48"/><text x="59.3344%" y="303.50">&lt;al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (48 samples, 3.43%)</title><rect x="59.0844%" y="277" width="3.4335%" height="15" fill="rgb(213,46,41)" fg:x="826" fg:w="48"/><text x="59.3344%" y="287.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (48 samples, 3.43%)</title><rect x="59.0844%" y="261" width="3.4335%" height="15" fill="rgb(215,133,35)" fg:x="826" fg:w="48"/><text x="59.3344%" y="271.50">all..</text></g><g><title>__rust_dealloc (1 samples, 0.07%)</title><rect x="62.4464%" y="245" width="0.0715%" height="15" fill="rgb(213,28,5)" fg:x="873" fg:w="1"/><text x="62.6964%" y="255.50"></text></g><g><title>ahash::operations::folded_multiply (11 samples, 0.79%)</title><rect x="63.3763%" y="309" width="0.7868%" height="15" fill="rgb(215,77,49)" fg:x="886" fg:w="11"/><text x="63.6263%" y="319.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (7 samples, 0.50%)</title><rect x="63.6624%" y="293" width="0.5007%" height="15" fill="rgb(248,100,22)" fg:x="890" fg:w="7"/><text x="63.9124%" y="303.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (17 samples, 1.22%)</title><rect x="63.3763%" y="325" width="1.2160%" height="15" fill="rgb(208,67,9)" fg:x="886" fg:w="17"/><text x="63.6263%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.43%)</title><rect x="64.1631%" y="309" width="0.4292%" height="15" fill="rgb(219,133,21)" fg:x="897" fg:w="6"/><text x="64.4131%" y="319.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.21%)</title><rect x="64.5923%" y="325" width="0.2146%" height="15" fill="rgb(246,46,29)" fg:x="903" fg:w="3"/><text x="64.8423%" y="335.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.21%)</title><rect x="64.5923%" y="309" width="0.2146%" height="15" fill="rgb(246,185,52)" fg:x="903" fg:w="3"/><text x="64.8423%" y="319.50"></text></g><g><title>ahash::operations::folded_multiply (15 samples, 1.07%)</title><rect x="65.3791%" y="229" width="1.0730%" height="15" fill="rgb(252,136,11)" fg:x="914" fg:w="15"/><text x="65.6291%" y="239.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (15 samples, 1.07%)</title><rect x="65.3791%" y="213" width="1.0730%" height="15" fill="rgb(219,138,53)" fg:x="914" fg:w="15"/><text x="65.6291%" y="223.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (34 samples, 2.43%)</title><rect x="64.9499%" y="245" width="2.4320%" height="15" fill="rgb(211,51,23)" fg:x="908" fg:w="34"/><text x="65.1999%" y="255.50">ah..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (13 samples, 0.93%)</title><rect x="66.4521%" y="229" width="0.9299%" height="15" fill="rgb(247,221,28)" fg:x="929" fg:w="13"/><text x="66.7021%" y="239.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (42 samples, 3.00%)</title><rect x="64.8069%" y="261" width="3.0043%" height="15" fill="rgb(251,222,45)" fg:x="906" fg:w="42"/><text x="65.0569%" y="271.50">&lt;ah..</text></g><g><title>ahash::operations::read_small (6 samples, 0.43%)</title><rect x="67.3820%" y="245" width="0.4292%" height="15" fill="rgb(217,162,53)" fg:x="942" fg:w="6"/><text x="67.6320%" y="255.50"></text></g><g><title>&lt;[u8] as ahash::convert::ReadFromSlice&gt;::read_last_u32 (4 samples, 0.29%)</title><rect x="67.5250%" y="229" width="0.2861%" height="15" fill="rgb(229,93,14)" fg:x="944" fg:w="4"/><text x="67.7750%" y="239.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (14 samples, 1.00%)</title><rect x="67.8112%" y="261" width="1.0014%" height="15" fill="rgb(209,67,49)" fg:x="948" fg:w="14"/><text x="68.0612%" y="271.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (14 samples, 1.00%)</title><rect x="67.8112%" y="245" width="1.0014%" height="15" fill="rgb(213,87,29)" fg:x="948" fg:w="14"/><text x="68.0612%" y="255.50"></text></g><g><title>ahash::operations::folded_multiply (14 samples, 1.00%)</title><rect x="67.8112%" y="229" width="1.0014%" height="15" fill="rgb(205,151,52)" fg:x="948" fg:w="14"/><text x="68.0612%" y="239.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (8 samples, 0.57%)</title><rect x="68.2403%" y="213" width="0.5722%" height="15" fill="rgb(253,215,39)" fg:x="954" fg:w="8"/><text x="68.4903%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (79 samples, 5.65%)</title><rect x="63.2332%" y="389" width="5.6509%" height="15" fill="rgb(221,220,41)" fg:x="884" fg:w="79"/><text x="63.4832%" y="399.50">hashbro..</text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::hash_one (77 samples, 5.51%)</title><rect x="63.3763%" y="373" width="5.5079%" height="15" fill="rgb(218,133,21)" fg:x="886" fg:w="77"/><text x="63.6263%" y="383.50">&lt;ahash:..</text></g><g><title>ahash::random_state::RandomState::hash_one (77 samples, 5.51%)</title><rect x="63.3763%" y="357" width="5.5079%" height="15" fill="rgb(221,193,43)" fg:x="886" fg:w="77"/><text x="63.6263%" y="367.50">ahash::..</text></g><g><title>&lt;T as ahash::specialize::CallHasher&gt;::get_hash (77 samples, 5.51%)</title><rect x="63.3763%" y="341" width="5.5079%" height="15" fill="rgb(240,128,52)" fg:x="886" fg:w="77"/><text x="63.6263%" y="351.50">&lt;T as a..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (57 samples, 4.08%)</title><rect x="64.8069%" y="325" width="4.0773%" height="15" fill="rgb(253,114,12)" fg:x="906" fg:w="57"/><text x="65.0569%" y="335.50">core..</text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (57 samples, 4.08%)</title><rect x="64.8069%" y="309" width="4.0773%" height="15" fill="rgb(215,223,47)" fg:x="906" fg:w="57"/><text x="65.0569%" y="319.50">&lt;all..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (57 samples, 4.08%)</title><rect x="64.8069%" y="293" width="4.0773%" height="15" fill="rgb(248,225,23)" fg:x="906" fg:w="57"/><text x="65.0569%" y="303.50">core..</text></g><g><title>core::hash::Hasher::write_str (57 samples, 4.08%)</title><rect x="64.8069%" y="277" width="4.0773%" height="15" fill="rgb(250,108,0)" fg:x="906" fg:w="57"/><text x="65.0569%" y="287.50">core..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.07%)</title><rect x="68.8126%" y="261" width="0.0715%" height="15" fill="rgb(228,208,7)" fg:x="962" fg:w="1"/><text x="69.0626%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.79%)</title><rect x="69.0272%" y="357" width="0.7868%" height="15" fill="rgb(244,45,10)" fg:x="965" fg:w="11"/><text x="69.2772%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (11 samples, 0.79%)</title><rect x="69.0272%" y="341" width="0.7868%" height="15" fill="rgb(207,125,25)" fg:x="965" fg:w="11"/><text x="69.2772%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (11 samples, 0.79%)</title><rect x="69.0272%" y="325" width="0.7868%" height="15" fill="rgb(210,195,18)" fg:x="965" fg:w="11"/><text x="69.2772%" y="335.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (11 samples, 0.79%)</title><rect x="69.0272%" y="309" width="0.7868%" height="15" fill="rgb(249,80,12)" fg:x="965" fg:w="11"/><text x="69.2772%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (4 samples, 0.29%)</title><rect x="70.1717%" y="341" width="0.2861%" height="15" fill="rgb(221,65,9)" fg:x="981" fg:w="4"/><text x="70.4217%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (4 samples, 0.29%)</title><rect x="70.1717%" y="325" width="0.2861%" height="15" fill="rgb(235,49,36)" fg:x="981" fg:w="4"/><text x="70.4217%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.29%)</title><rect x="70.1717%" y="309" width="0.2861%" height="15" fill="rgb(225,32,20)" fg:x="981" fg:w="4"/><text x="70.4217%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.21%)</title><rect x="70.2432%" y="293" width="0.2146%" height="15" fill="rgb(215,141,46)" fg:x="982" fg:w="3"/><text x="70.4932%" y="303.50"></text></g><g><title>mem_cgroup_handle_over_high (1 samples, 0.07%)</title><rect x="77.3247%" y="149" width="0.0715%" height="15" fill="rgb(250,160,47)" fg:x="1081" fg:w="1"/><text x="77.5747%" y="159.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (102 samples, 7.30%)</title><rect x="70.4578%" y="277" width="7.2961%" height="15" fill="rgb(216,222,40)" fg:x="985" fg:w="102"/><text x="70.7078%" y="287.50">&lt;[A] as co..</text></g><g><title>__memcmp_avx2_movbe (63 samples, 4.51%)</title><rect x="73.2475%" y="261" width="4.5064%" height="15" fill="rgb(234,217,39)" fg:x="1024" fg:w="63"/><text x="73.4975%" y="271.50">__mem..</text></g><g><title>asm_sysvec_reschedule_ipi (6 samples, 0.43%)</title><rect x="77.3247%" y="245" width="0.4292%" height="15" fill="rgb(207,178,40)" fg:x="1081" fg:w="6"/><text x="77.5747%" y="255.50"></text></g><g><title>sysvec_reschedule_ipi (6 samples, 0.43%)</title><rect x="77.3247%" y="229" width="0.4292%" height="15" fill="rgb(221,136,13)" fg:x="1081" fg:w="6"/><text x="77.5747%" y="239.50"></text></g><g><title>irqentry_exit (6 samples, 0.43%)</title><rect x="77.3247%" y="213" width="0.4292%" height="15" fill="rgb(249,199,10)" fg:x="1081" fg:w="6"/><text x="77.5747%" y="223.50"></text></g><g><title>irqentry_exit_to_user_mode (6 samples, 0.43%)</title><rect x="77.3247%" y="197" width="0.4292%" height="15" fill="rgb(249,222,13)" fg:x="1081" fg:w="6"/><text x="77.5747%" y="207.50"></text></g><g><title>exit_to_user_mode_prepare (6 samples, 0.43%)</title><rect x="77.3247%" y="181" width="0.4292%" height="15" fill="rgb(244,185,38)" fg:x="1081" fg:w="6"/><text x="77.5747%" y="191.50"></text></g><g><title>exit_to_user_mode_loop (6 samples, 0.43%)</title><rect x="77.3247%" y="165" width="0.4292%" height="15" fill="rgb(236,202,9)" fg:x="1081" fg:w="6"/><text x="77.5747%" y="175.50"></text></g><g><title>schedule (5 samples, 0.36%)</title><rect x="77.3963%" y="149" width="0.3577%" height="15" fill="rgb(250,229,37)" fg:x="1082" fg:w="5"/><text x="77.6463%" y="159.50"></text></g><g><title>__schedule (5 samples, 0.36%)</title><rect x="77.3963%" y="133" width="0.3577%" height="15" fill="rgb(206,174,23)" fg:x="1082" fg:w="5"/><text x="77.6463%" y="143.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.36%)</title><rect x="77.3963%" y="117" width="0.3577%" height="15" fill="rgb(211,33,43)" fg:x="1082" fg:w="5"/><text x="77.6463%" y="127.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.36%)</title><rect x="77.3963%" y="101" width="0.3577%" height="15" fill="rgb(245,58,50)" fg:x="1082" fg:w="5"/><text x="77.6463%" y="111.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.36%)</title><rect x="77.3963%" y="85" width="0.3577%" height="15" fill="rgb(244,68,36)" fg:x="1082" fg:w="5"/><text x="77.6463%" y="95.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.36%)</title><rect x="77.3963%" y="69" width="0.3577%" height="15" fill="rgb(232,229,15)" fg:x="1082" fg:w="5"/><text x="77.6463%" y="79.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.36%)</title><rect x="77.3963%" y="53" width="0.3577%" height="15" fill="rgb(254,30,23)" fg:x="1082" fg:w="5"/><text x="77.6463%" y="63.50"></text></g><g><title>native_write_msr (5 samples, 0.36%)</title><rect x="77.3963%" y="37" width="0.3577%" height="15" fill="rgb(235,160,14)" fg:x="1082" fg:w="5"/><text x="77.6463%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (115 samples, 8.23%)</title><rect x="69.8140%" y="357" width="8.2260%" height="15" fill="rgb(212,155,44)" fg:x="976" fg:w="115"/><text x="70.0640%" y="367.50">hashbrown::..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (106 samples, 7.58%)</title><rect x="70.4578%" y="341" width="7.5823%" height="15" fill="rgb(226,2,50)" fg:x="985" fg:w="106"/><text x="70.7078%" y="351.50">hashbrown:..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (106 samples, 7.58%)</title><rect x="70.4578%" y="325" width="7.5823%" height="15" fill="rgb(234,177,6)" fg:x="985" fg:w="106"/><text x="70.7078%" y="335.50">&lt;alloc::st..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (106 samples, 7.58%)</title><rect x="70.4578%" y="309" width="7.5823%" height="15" fill="rgb(217,24,9)" fg:x="985" fg:w="106"/><text x="70.7078%" y="319.50">alloc::vec..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (106 samples, 7.58%)</title><rect x="70.4578%" y="293" width="7.5823%" height="15" fill="rgb(220,13,46)" fg:x="985" fg:w="106"/><text x="70.7078%" y="303.50">core::slic..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.29%)</title><rect x="77.7539%" y="277" width="0.2861%" height="15" fill="rgb(239,221,27)" fg:x="1087" fg:w="4"/><text x="78.0039%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (10 samples, 0.72%)</title><rect x="78.0401%" y="357" width="0.7153%" height="15" fill="rgb(222,198,25)" fg:x="1091" fg:w="10"/><text x="78.2901%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 0.29%)</title><rect x="78.7554%" y="357" width="0.2861%" height="15" fill="rgb(211,99,13)" fg:x="1101" fg:w="4"/><text x="79.0054%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.29%)</title><rect x="79.0415%" y="325" width="0.2861%" height="15" fill="rgb(232,111,31)" fg:x="1105" fg:w="4"/><text x="79.2915%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (8 samples, 0.57%)</title><rect x="79.0415%" y="357" width="0.5722%" height="15" fill="rgb(245,82,37)" fg:x="1105" fg:w="8"/><text x="79.2915%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (8 samples, 0.57%)</title><rect x="79.0415%" y="341" width="0.5722%" height="15" fill="rgb(227,149,46)" fg:x="1105" fg:w="8"/><text x="79.2915%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.29%)</title><rect x="79.3276%" y="325" width="0.2861%" height="15" fill="rgb(218,36,50)" fg:x="1109" fg:w="4"/><text x="79.5776%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (9 samples, 0.64%)</title><rect x="79.6137%" y="357" width="0.6438%" height="15" fill="rgb(226,80,48)" fg:x="1113" fg:w="9"/><text x="79.8637%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9 samples, 0.64%)</title><rect x="79.6137%" y="341" width="0.6438%" height="15" fill="rgb(238,224,15)" fg:x="1113" fg:w="9"/><text x="79.8637%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (160 samples, 11.44%)</title><rect x="68.8841%" y="373" width="11.4449%" height="15" fill="rgb(241,136,10)" fg:x="963" fg:w="160"/><text x="69.1341%" y="383.50">hashbrown::raw::R..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.07%)</title><rect x="80.2575%" y="357" width="0.0715%" height="15" fill="rgb(208,32,45)" fg:x="1122" fg:w="1"/><text x="80.5075%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (247 samples, 17.67%)</title><rect x="62.8755%" y="405" width="17.6681%" height="15" fill="rgb(207,135,9)" fg:x="879" fg:w="247"/><text x="63.1255%" y="415.50">hashbrown::rustc_entry::&lt;im..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (163 samples, 11.66%)</title><rect x="68.8841%" y="389" width="11.6595%" height="15" fill="rgb(206,86,44)" fg:x="963" fg:w="163"/><text x="69.1341%" y="399.50">hashbrown::raw::R..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.21%)</title><rect x="80.3290%" y="373" width="0.2146%" height="15" fill="rgb(245,177,15)" fg:x="1123" fg:w="3"/><text x="80.5790%" y="383.50"></text></g><g><title>msf1brc::aggregator::MeasurementAggregator::process_chunk (2 samples, 0.14%)</title><rect x="80.5436%" y="405" width="0.1431%" height="15" fill="rgb(206,64,50)" fg:x="1126" fg:w="2"/><text x="80.7936%" y="415.50"></text></g><g><title>msf1brc::aggregator::MeasurementAggregator::add (934 samples, 66.81%)</title><rect x="14.1631%" y="437" width="66.8097%" height="15" fill="rgb(234,36,40)" fg:x="198" fg:w="934"/><text x="14.4131%" y="447.50">msf1brc::aggregator::MeasurementAggregator::add</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (258 samples, 18.45%)</title><rect x="62.5179%" y="421" width="18.4549%" height="15" fill="rgb(213,64,8)" fg:x="874" fg:w="258"/><text x="62.7679%" y="431.50">std::collections::hash::map::..</text></g><g><title>std::collections::hash::map::map_entry (4 samples, 0.29%)</title><rect x="80.6867%" y="405" width="0.2861%" height="15" fill="rgb(210,75,36)" fg:x="1128" fg:w="4"/><text x="80.9367%" y="415.50"></text></g><g><title>msf1brc::aggregator::MeasurementAggregator::process_chunk (2 samples, 0.14%)</title><rect x="80.9728%" y="437" width="0.1431%" height="15" fill="rgb(229,88,21)" fg:x="1132" fg:w="2"/><text x="81.2228%" y="447.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (9 samples, 0.64%)</title><rect x="82.6180%" y="405" width="0.6438%" height="15" fill="rgb(252,204,47)" fg:x="1155" fg:w="9"/><text x="82.8680%" y="415.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (9 samples, 0.64%)</title><rect x="82.6180%" y="389" width="0.6438%" height="15" fill="rgb(208,77,27)" fg:x="1155" fg:w="9"/><text x="82.8680%" y="399.50"></text></g><g><title>core::cmp::min (2 samples, 0.14%)</title><rect x="83.1187%" y="373" width="0.1431%" height="15" fill="rgb(221,76,26)" fg:x="1162" fg:w="2"/><text x="83.3687%" y="383.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.14%)</title><rect x="83.1187%" y="357" width="0.1431%" height="15" fill="rgb(225,139,18)" fg:x="1162" fg:w="2"/><text x="83.3687%" y="367.50"></text></g><g><title>std::io::read_until (2 samples, 0.14%)</title><rect x="83.1187%" y="341" width="0.1431%" height="15" fill="rgb(230,137,11)" fg:x="1162" fg:w="2"/><text x="83.3687%" y="351.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (1 samples, 0.07%)</title><rect x="83.2618%" y="373" width="0.0715%" height="15" fill="rgb(212,28,1)" fg:x="1164" fg:w="1"/><text x="83.5118%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.07%)</title><rect x="83.2618%" y="357" width="0.0715%" height="15" fill="rgb(248,164,17)" fg:x="1164" fg:w="1"/><text x="83.5118%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.07%)</title><rect x="83.2618%" y="341" width="0.0715%" height="15" fill="rgb(222,171,42)" fg:x="1164" fg:w="1"/><text x="83.5118%" y="351.50"></text></g><g><title>_copy_to_iter (1 samples, 0.07%)</title><rect x="83.6910%" y="181" width="0.0715%" height="15" fill="rgb(243,84,45)" fg:x="1170" fg:w="1"/><text x="83.9410%" y="191.50"></text></g><g><title>copy_page_to_iter (5 samples, 0.36%)</title><rect x="83.7625%" y="181" width="0.3577%" height="15" fill="rgb(252,49,23)" fg:x="1171" fg:w="5"/><text x="84.0125%" y="191.50"></text></g><g><title>_copy_to_iter (5 samples, 0.36%)</title><rect x="83.7625%" y="165" width="0.3577%" height="15" fill="rgb(215,19,7)" fg:x="1171" fg:w="5"/><text x="84.0125%" y="175.50"></text></g><g><title>rep_movs_alternative (5 samples, 0.36%)</title><rect x="83.7625%" y="149" width="0.3577%" height="15" fill="rgb(238,81,41)" fg:x="1171" fg:w="5"/><text x="84.0125%" y="159.50"></text></g><g><title>ext4_file_read_iter (10 samples, 0.72%)</title><rect x="83.6195%" y="229" width="0.7153%" height="15" fill="rgb(210,199,37)" fg:x="1169" fg:w="10"/><text x="83.8695%" y="239.50"></text></g><g><title>generic_file_read_iter (10 samples, 0.72%)</title><rect x="83.6195%" y="213" width="0.7153%" height="15" fill="rgb(244,192,49)" fg:x="1169" fg:w="10"/><text x="83.8695%" y="223.50"></text></g><g><title>filemap_read (10 samples, 0.72%)</title><rect x="83.6195%" y="197" width="0.7153%" height="15" fill="rgb(226,211,11)" fg:x="1169" fg:w="10"/><text x="83.8695%" y="207.50"></text></g><g><title>filemap_get_pages (3 samples, 0.21%)</title><rect x="84.1202%" y="181" width="0.2146%" height="15" fill="rgb(236,162,54)" fg:x="1176" fg:w="3"/><text x="84.3702%" y="191.50"></text></g><g><title>filemap_get_read_batch (3 samples, 0.21%)</title><rect x="84.1202%" y="165" width="0.2146%" height="15" fill="rgb(220,229,9)" fg:x="1176" fg:w="3"/><text x="84.3702%" y="175.50"></text></g><g><title>xas_load (1 samples, 0.07%)</title><rect x="84.2632%" y="149" width="0.0715%" height="15" fill="rgb(250,87,22)" fg:x="1178" fg:w="1"/><text x="84.5132%" y="159.50"></text></g><g><title>xas_descend (1 samples, 0.07%)</title><rect x="84.2632%" y="133" width="0.0715%" height="15" fill="rgb(239,43,17)" fg:x="1178" fg:w="1"/><text x="84.5132%" y="143.50"></text></g><g><title>__x64_sys_read (14 samples, 1.00%)</title><rect x="83.4049%" y="277" width="1.0014%" height="15" fill="rgb(231,177,25)" fg:x="1166" fg:w="14"/><text x="83.6549%" y="287.50"></text></g><g><title>ksys_read (14 samples, 1.00%)</title><rect x="83.4049%" y="261" width="1.0014%" height="15" fill="rgb(219,179,1)" fg:x="1166" fg:w="14"/><text x="83.6549%" y="271.50"></text></g><g><title>vfs_read (13 samples, 0.93%)</title><rect x="83.4764%" y="245" width="0.9299%" height="15" fill="rgb(238,219,53)" fg:x="1167" fg:w="13"/><text x="83.7264%" y="255.50"></text></g><g><title>generic_file_read_iter (1 samples, 0.07%)</title><rect x="84.3348%" y="229" width="0.0715%" height="15" fill="rgb(232,167,36)" fg:x="1179" fg:w="1"/><text x="84.5848%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (17 samples, 1.22%)</title><rect x="83.3333%" y="309" width="1.2160%" height="15" fill="rgb(244,19,51)" fg:x="1165" fg:w="17"/><text x="83.5833%" y="319.50"></text></g><g><title>do_syscall_64 (16 samples, 1.14%)</title><rect x="83.4049%" y="293" width="1.1445%" height="15" fill="rgb(224,6,22)" fg:x="1166" fg:w="16"/><text x="83.6549%" y="303.50"></text></g><g><title>syscall_exit_to_user_mode (2 samples, 0.14%)</title><rect x="84.4063%" y="277" width="0.1431%" height="15" fill="rgb(224,145,5)" fg:x="1180" fg:w="2"/><text x="84.6563%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (21 samples, 1.50%)</title><rect x="83.2618%" y="405" width="1.5021%" height="15" fill="rgb(234,130,49)" fg:x="1164" fg:w="21"/><text x="83.5118%" y="415.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (21 samples, 1.50%)</title><rect x="83.2618%" y="389" width="1.5021%" height="15" fill="rgb(254,6,2)" fg:x="1164" fg:w="21"/><text x="83.5118%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (20 samples, 1.43%)</title><rect x="83.3333%" y="373" width="1.4306%" height="15" fill="rgb(208,96,46)" fg:x="1165" fg:w="20"/><text x="83.5833%" y="383.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (20 samples, 1.43%)</title><rect x="83.3333%" y="357" width="1.4306%" height="15" fill="rgb(239,3,39)" fg:x="1165" fg:w="20"/><text x="83.5833%" y="367.50"></text></g><g><title>__GI___libc_read (20 samples, 1.43%)</title><rect x="83.3333%" y="341" width="1.4306%" height="15" fill="rgb(233,210,1)" fg:x="1165" fg:w="20"/><text x="83.5833%" y="351.50"></text></g><g><title>__GI___libc_read (20 samples, 1.43%)</title><rect x="83.3333%" y="325" width="1.4306%" height="15" fill="rgb(244,137,37)" fg:x="1165" fg:w="20"/><text x="83.5833%" y="335.50"></text></g><g><title>syscall_return_via_sysret (3 samples, 0.21%)</title><rect x="84.5494%" y="309" width="0.2146%" height="15" fill="rgb(240,136,2)" fg:x="1182" fg:w="3"/><text x="84.7994%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.14%)</title><rect x="84.8355%" y="357" width="0.1431%" height="15" fill="rgb(239,18,37)" fg:x="1186" fg:w="2"/><text x="85.0855%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.07%)</title><rect x="84.9070%" y="341" width="0.0715%" height="15" fill="rgb(218,185,22)" fg:x="1187" fg:w="1"/><text x="85.1570%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.07%)</title><rect x="84.9070%" y="325" width="0.0715%" height="15" fill="rgb(225,218,4)" fg:x="1187" fg:w="1"/><text x="85.1570%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.07%)</title><rect x="84.9070%" y="309" width="0.0715%" height="15" fill="rgb(230,182,32)" fg:x="1187" fg:w="1"/><text x="85.1570%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 1.57%)</title><rect x="84.9785%" y="357" width="1.5737%" height="15" fill="rgb(242,56,43)" fg:x="1188" fg:w="22"/><text x="85.2285%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (22 samples, 1.57%)</title><rect x="84.9785%" y="341" width="1.5737%" height="15" fill="rgb(233,99,24)" fg:x="1188" fg:w="22"/><text x="85.2285%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (26 samples, 1.86%)</title><rect x="84.7639%" y="405" width="1.8598%" height="15" fill="rgb(234,209,42)" fg:x="1185" fg:w="26"/><text x="85.0139%" y="415.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (25 samples, 1.79%)</title><rect x="84.8355%" y="389" width="1.7883%" height="15" fill="rgb(227,7,12)" fg:x="1186" fg:w="25"/><text x="85.0855%" y="399.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (25 samples, 1.79%)</title><rect x="84.8355%" y="373" width="1.7883%" height="15" fill="rgb(245,203,43)" fg:x="1186" fg:w="25"/><text x="85.0855%" y="383.50">a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.07%)</title><rect x="86.5522%" y="357" width="0.0715%" height="15" fill="rgb(238,205,33)" fg:x="1210" fg:w="1"/><text x="86.8022%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8 samples, 0.57%)</title><rect x="86.6237%" y="405" width="0.5722%" height="15" fill="rgb(231,56,7)" fg:x="1211" fg:w="8"/><text x="86.8737%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeToInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.57%)</title><rect x="86.6237%" y="389" width="0.5722%" height="15" fill="rgb(244,186,29)" fg:x="1211" fg:w="8"/><text x="86.8737%" y="399.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.57%)</title><rect x="86.6237%" y="373" width="0.5722%" height="15" fill="rgb(234,111,31)" fg:x="1211" fg:w="8"/><text x="86.8737%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.57%)</title><rect x="86.6237%" y="357" width="0.5722%" height="15" fill="rgb(241,149,10)" fg:x="1211" fg:w="8"/><text x="86.8737%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (5 samples, 0.36%)</title><rect x="92.7754%" y="373" width="0.3577%" height="15" fill="rgb(249,206,44)" fg:x="1297" fg:w="5"/><text x="93.0254%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (8 samples, 0.57%)</title><rect x="93.1330%" y="373" width="0.5722%" height="15" fill="rgb(251,153,30)" fg:x="1302" fg:w="8"/><text x="93.3830%" y="383.50"></text></g><g><title>core::ptr::align_offset (8 samples, 0.57%)</title><rect x="93.1330%" y="357" width="0.5722%" height="15" fill="rgb(239,152,38)" fg:x="1302" fg:w="8"/><text x="93.3830%" y="367.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (12 samples, 0.86%)</title><rect x="93.7053%" y="373" width="0.8584%" height="15" fill="rgb(249,139,47)" fg:x="1310" fg:w="12"/><text x="93.9553%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.14%)</title><rect x="94.4206%" y="357" width="0.1431%" height="15" fill="rgb(244,64,35)" fg:x="1320" fg:w="2"/><text x="94.6706%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.07%)</title><rect x="94.5637%" y="373" width="0.0715%" height="15" fill="rgb(216,46,15)" fg:x="1322" fg:w="1"/><text x="94.8137%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,191 samples, 85.19%)</title><rect x="13.2332%" y="597" width="85.1931%" height="15" fill="rgb(250,74,19)" fg:x="185" fg:w="1191"/><text x="13.4832%" y="607.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (1,191 samples, 85.19%)</title><rect x="13.2332%" y="581" width="85.1931%" height="15" fill="rgb(249,42,33)" fg:x="185" fg:w="1191"/><text x="13.4832%" y="591.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,191 samples, 85.19%)</title><rect x="13.2332%" y="565" width="85.1931%" height="15" fill="rgb(242,149,17)" fg:x="185" fg:w="1191"/><text x="13.4832%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,191 samples, 85.19%)</title><rect x="13.2332%" y="549" width="85.1931%" height="15" fill="rgb(244,29,21)" fg:x="185" fg:w="1191"/><text x="13.4832%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,191 samples, 85.19%)</title><rect x="13.2332%" y="533" width="85.1931%" height="15" fill="rgb(220,130,37)" fg:x="185" fg:w="1191"/><text x="13.4832%" y="543.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,191 samples, 85.19%)</title><rect x="13.2332%" y="517" width="85.1931%" height="15" fill="rgb(211,67,2)" fg:x="185" fg:w="1191"/><text x="13.4832%" y="527.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (1,191 samples, 85.19%)</title><rect x="13.2332%" y="501" width="85.1931%" height="15" fill="rgb(235,68,52)" fg:x="185" fg:w="1191"/><text x="13.4832%" y="511.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,191 samples, 85.19%)</title><rect x="13.2332%" y="485" width="85.1931%" height="15" fill="rgb(246,142,3)" fg:x="185" fg:w="1191"/><text x="13.4832%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>msf1brc::parallel::ParallelMeasurementAggregator::new::_{{closure}}::_{{closure}} (1,191 samples, 85.19%)</title><rect x="13.2332%" y="469" width="85.1931%" height="15" fill="rgb(241,25,7)" fg:x="185" fg:w="1191"/><text x="13.4832%" y="479.50">msf1brc::parallel::ParallelMeasurementAggregator::new::_{{closure}}::_{{closure}}</text></g><g><title>msf1brc::aggregator::MeasurementAggregator::process_chunk (1,191 samples, 85.19%)</title><rect x="13.2332%" y="453" width="85.1931%" height="15" fill="rgb(242,119,39)" fg:x="185" fg:w="1191"/><text x="13.4832%" y="463.50">msf1brc::aggregator::MeasurementAggregator::process_chunk</text></g><g><title>std::io::BufRead::read_until (242 samples, 17.31%)</title><rect x="81.1159%" y="437" width="17.3104%" height="15" fill="rgb(241,98,45)" fg:x="1134" fg:w="242"/><text x="81.3659%" y="447.50">std::io::BufRead::read_until</text></g><g><title>std::io::read_until (240 samples, 17.17%)</title><rect x="81.2589%" y="421" width="17.1674%" height="15" fill="rgb(254,28,30)" fg:x="1136" fg:w="240"/><text x="81.5089%" y="431.50">std::io::read_until</text></g><g><title>core::slice::memchr::memchr (157 samples, 11.23%)</title><rect x="87.1960%" y="405" width="11.2303%" height="15" fill="rgb(241,142,54)" fg:x="1219" fg:w="157"/><text x="87.4460%" y="415.50">core::slice::memc..</text></g><g><title>core::slice::memchr::memchr_aligned (148 samples, 10.59%)</title><rect x="87.8398%" y="389" width="10.5866%" height="15" fill="rgb(222,85,15)" fg:x="1228" fg:w="148"/><text x="88.0898%" y="399.50">core::slice::me..</text></g><g><title>core::slice::memchr::memchr_naive (53 samples, 3.79%)</title><rect x="94.6352%" y="373" width="3.7911%" height="15" fill="rgb(210,85,47)" fg:x="1323" fg:w="53"/><text x="94.8852%" y="383.50">core..</text></g><g><title>__clone3 (1,192 samples, 85.26%)</title><rect x="13.2332%" y="645" width="85.2647%" height="15" fill="rgb(224,206,25)" fg:x="185" fg:w="1192"/><text x="13.4832%" y="655.50">__clone3</text></g><g><title>start_thread (1,192 samples, 85.26%)</title><rect x="13.2332%" y="629" width="85.2647%" height="15" fill="rgb(243,201,19)" fg:x="185" fg:w="1192"/><text x="13.4832%" y="639.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1,192 samples, 85.26%)</title><rect x="13.2332%" y="613" width="85.2647%" height="15" fill="rgb(236,59,4)" fg:x="185" fg:w="1192"/><text x="13.4832%" y="623.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (1 samples, 0.07%)</title><rect x="98.4263%" y="597" width="0.0715%" height="15" fill="rgb(254,179,45)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="607.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.07%)</title><rect x="98.4263%" y="581" width="0.0715%" height="15" fill="rgb(226,14,10)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="591.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.07%)</title><rect x="98.4263%" y="565" width="0.0715%" height="15" fill="rgb(244,27,41)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="575.50"></text></g><g><title>tcache_init (1 samples, 0.07%)</title><rect x="98.4263%" y="549" width="0.0715%" height="15" fill="rgb(235,35,32)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="559.50"></text></g><g><title>tcache_init (1 samples, 0.07%)</title><rect x="98.4263%" y="533" width="0.0715%" height="15" fill="rgb(218,68,31)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="543.50"></text></g><g><title>arena_get2 (1 samples, 0.07%)</title><rect x="98.4263%" y="517" width="0.0715%" height="15" fill="rgb(207,120,37)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="527.50"></text></g><g><title>arena_get2 (1 samples, 0.07%)</title><rect x="98.4263%" y="501" width="0.0715%" height="15" fill="rgb(227,98,0)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="511.50"></text></g><g><title>_int_new_arena (1 samples, 0.07%)</title><rect x="98.4263%" y="485" width="0.0715%" height="15" fill="rgb(207,7,3)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="495.50"></text></g><g><title>new_heap (1 samples, 0.07%)</title><rect x="98.4263%" y="469" width="0.0715%" height="15" fill="rgb(206,98,19)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="479.50"></text></g><g><title>alloc_new_heap (1 samples, 0.07%)</title><rect x="98.4263%" y="453" width="0.0715%" height="15" fill="rgb(217,5,26)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="463.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.07%)</title><rect x="98.4263%" y="437" width="0.0715%" height="15" fill="rgb(235,190,38)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="447.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.07%)</title><rect x="98.4263%" y="421" width="0.0715%" height="15" fill="rgb(247,86,24)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="431.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.07%)</title><rect x="98.4263%" y="405" width="0.0715%" height="15" fill="rgb(205,101,16)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="415.50"></text></g><g><title>do_syscall_64 (1 samples, 0.07%)</title><rect x="98.4263%" y="389" width="0.0715%" height="15" fill="rgb(246,168,33)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="399.50"></text></g><g><title>__x64_sys_mmap (1 samples, 0.07%)</title><rect x="98.4263%" y="373" width="0.0715%" height="15" fill="rgb(231,114,1)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="383.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.07%)</title><rect x="98.4263%" y="357" width="0.0715%" height="15" fill="rgb(207,184,53)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="367.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.07%)</title><rect x="98.4263%" y="341" width="0.0715%" height="15" fill="rgb(224,95,51)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="351.50"></text></g><g><title>do_mmap (1 samples, 0.07%)</title><rect x="98.4263%" y="325" width="0.0715%" height="15" fill="rgb(212,188,45)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="335.50"></text></g><g><title>mmap_region (1 samples, 0.07%)</title><rect x="98.4263%" y="309" width="0.0715%" height="15" fill="rgb(223,154,38)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="319.50"></text></g><g><title>mas_store_prealloc (1 samples, 0.07%)</title><rect x="98.4263%" y="293" width="0.0715%" height="15" fill="rgb(251,22,52)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="303.50"></text></g><g><title>mas_destroy (1 samples, 0.07%)</title><rect x="98.4263%" y="277" width="0.0715%" height="15" fill="rgb(229,209,22)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="287.50"></text></g><g><title>kmem_cache_free_bulk (1 samples, 0.07%)</title><rect x="98.4263%" y="261" width="0.0715%" height="15" fill="rgb(234,138,34)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="271.50"></text></g><g><title>kmem_cache_free_bulk.part.0 (1 samples, 0.07%)</title><rect x="98.4263%" y="245" width="0.0715%" height="15" fill="rgb(212,95,11)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="255.50"></text></g><g><title>build_detached_freelist (1 samples, 0.07%)</title><rect x="98.4263%" y="229" width="0.0715%" height="15" fill="rgb(240,179,47)" fg:x="1376" fg:w="1"/><text x="98.6763%" y="239.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.43%)</title><rect x="98.4979%" y="645" width="0.4292%" height="15" fill="rgb(240,163,11)" fg:x="1377" fg:w="6"/><text x="98.7479%" y="655.50"></text></g><g><title>_start (1 samples, 0.07%)</title><rect x="98.9270%" y="645" width="0.0715%" height="15" fill="rgb(236,37,12)" fg:x="1383" fg:w="1"/><text x="99.1770%" y="655.50"></text></g><g><title>_dl_start (1 samples, 0.07%)</title><rect x="98.9270%" y="629" width="0.0715%" height="15" fill="rgb(232,164,16)" fg:x="1383" fg:w="1"/><text x="99.1770%" y="639.50"></text></g><g><title>_dl_start_final (1 samples, 0.07%)</title><rect x="98.9270%" y="613" width="0.0715%" height="15" fill="rgb(244,205,15)" fg:x="1383" fg:w="1"/><text x="99.1770%" y="623.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.07%)</title><rect x="98.9270%" y="597" width="0.0715%" height="15" fill="rgb(223,117,47)" fg:x="1383" fg:w="1"/><text x="99.1770%" y="607.50"></text></g><g><title>dl_main (1 samples, 0.07%)</title><rect x="98.9270%" y="581" width="0.0715%" height="15" fill="rgb(244,107,35)" fg:x="1383" fg:w="1"/><text x="99.1770%" y="591.50"></text></g><g><title>init_tls (1 samples, 0.07%)</title><rect x="98.9270%" y="565" width="0.0715%" height="15" fill="rgb(205,140,8)" fg:x="1383" fg:w="1"/><text x="99.1770%" y="575.50"></text></g><g><title>__tls_init_tp (1 samples, 0.07%)</title><rect x="98.9270%" y="549" width="0.0715%" height="15" fill="rgb(228,84,46)" fg:x="1383" fg:w="1"/><text x="99.1770%" y="559.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.07%)</title><rect x="98.9270%" y="533" width="0.0715%" height="15" fill="rgb(254,188,9)" fg:x="1383" fg:w="1"/><text x="99.1770%" y="543.50"></text></g><g><title>do_syscall_64 (1 samples, 0.07%)</title><rect x="98.9270%" y="517" width="0.0715%" height="15" fill="rgb(206,112,54)" fg:x="1383" fg:w="1"/><text x="99.1770%" y="527.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.07%)</title><rect x="98.9270%" y="501" width="0.0715%" height="15" fill="rgb(216,84,49)" fg:x="1383" fg:w="1"/><text x="99.1770%" y="511.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.14%)</title><rect x="98.9986%" y="645" width="0.1431%" height="15" fill="rgb(214,194,35)" fg:x="1384" fg:w="2"/><text x="99.2486%" y="655.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.07%)</title><rect x="99.1416%" y="645" width="0.0715%" height="15" fill="rgb(249,28,3)" fg:x="1386" fg:w="1"/><text x="99.3916%" y="655.50"></text></g><g><title>do_syscall_64 (1 samples, 0.07%)</title><rect x="99.1416%" y="629" width="0.0715%" height="15" fill="rgb(222,56,52)" fg:x="1386" fg:w="1"/><text x="99.3916%" y="639.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.07%)</title><rect x="99.1416%" y="613" width="0.0715%" height="15" fill="rgb(245,217,50)" fg:x="1386" fg:w="1"/><text x="99.3916%" y="623.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.07%)</title><rect x="99.1416%" y="597" width="0.0715%" height="15" fill="rgb(213,201,24)" fg:x="1386" fg:w="1"/><text x="99.3916%" y="607.50"></text></g><g><title>bprm_execve (1 samples, 0.07%)</title><rect x="99.1416%" y="581" width="0.0715%" height="15" fill="rgb(248,116,28)" fg:x="1386" fg:w="1"/><text x="99.3916%" y="591.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.07%)</title><rect x="99.1416%" y="565" width="0.0715%" height="15" fill="rgb(219,72,43)" fg:x="1386" fg:w="1"/><text x="99.3916%" y="575.50"></text></g><g><title>exec_binprm (1 samples, 0.07%)</title><rect x="99.1416%" y="549" width="0.0715%" height="15" fill="rgb(209,138,14)" fg:x="1386" fg:w="1"/><text x="99.3916%" y="559.50"></text></g><g><title>search_binary_handler (1 samples, 0.07%)</title><rect x="99.1416%" y="533" width="0.0715%" height="15" fill="rgb(222,18,33)" fg:x="1386" fg:w="1"/><text x="99.3916%" y="543.50"></text></g><g><title>load_elf_binary (1 samples, 0.07%)</title><rect x="99.1416%" y="517" width="0.0715%" height="15" fill="rgb(213,199,7)" fg:x="1386" fg:w="1"/><text x="99.3916%" y="527.50"></text></g><g><title>setup_arg_pages (1 samples, 0.07%)</title><rect x="99.1416%" y="501" width="0.0715%" height="15" fill="rgb(250,110,10)" fg:x="1386" fg:w="1"/><text x="99.3916%" y="511.50"></text></g><g><title>shift_arg_pages (1 samples, 0.07%)</title><rect x="99.1416%" y="485" width="0.0715%" height="15" fill="rgb(248,123,6)" fg:x="1386" fg:w="1"/><text x="99.3916%" y="495.50"></text></g><g><title>vma_expand (1 samples, 0.07%)</title><rect x="99.1416%" y="469" width="0.0715%" height="15" fill="rgb(206,91,31)" fg:x="1386" fg:w="1"/><text x="99.3916%" y="479.50"></text></g><g><title>mas_preallocate (1 samples, 0.07%)</title><rect x="99.1416%" y="453" width="0.0715%" height="15" fill="rgb(211,154,13)" fg:x="1386" fg:w="1"/><text x="99.3916%" y="463.50"></text></g><g><title>mas_alloc_nodes (1 samples, 0.07%)</title><rect x="99.1416%" y="437" width="0.0715%" height="15" fill="rgb(225,148,7)" fg:x="1386" fg:w="1"/><text x="99.3916%" y="447.50"></text></g><g><title>entry_SYSCALL_64_safe_stack (1 samples, 0.07%)</title><rect x="99.2132%" y="645" width="0.0715%" height="15" fill="rgb(220,160,43)" fg:x="1387" fg:w="1"/><text x="99.4632%" y="655.50"></text></g><g><title>msf1brc (1,393 samples, 99.64%)</title><rect x="0.0000%" y="661" width="99.6423%" height="15" fill="rgb(213,52,39)" fg:x="0" fg:w="1393"/><text x="0.2500%" y="671.50">msf1brc</text></g><g><title>ret_from_fork_asm (5 samples, 0.36%)</title><rect x="99.2847%" y="645" width="0.3577%" height="15" fill="rgb(243,137,7)" fg:x="1388" fg:w="5"/><text x="99.5347%" y="655.50"></text></g><g><title>ret_from_fork (5 samples, 0.36%)</title><rect x="99.2847%" y="629" width="0.3577%" height="15" fill="rgb(230,79,13)" fg:x="1388" fg:w="5"/><text x="99.5347%" y="639.50"></text></g><g><title>schedule_tail (5 samples, 0.36%)</title><rect x="99.2847%" y="613" width="0.3577%" height="15" fill="rgb(247,105,23)" fg:x="1388" fg:w="5"/><text x="99.5347%" y="623.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.36%)</title><rect x="99.2847%" y="597" width="0.3577%" height="15" fill="rgb(223,179,41)" fg:x="1388" fg:w="5"/><text x="99.5347%" y="607.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.36%)</title><rect x="99.2847%" y="581" width="0.3577%" height="15" fill="rgb(218,9,34)" fg:x="1388" fg:w="5"/><text x="99.5347%" y="591.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.36%)</title><rect x="99.2847%" y="565" width="0.3577%" height="15" fill="rgb(222,106,8)" fg:x="1388" fg:w="5"/><text x="99.5347%" y="575.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.36%)</title><rect x="99.2847%" y="549" width="0.3577%" height="15" fill="rgb(211,220,0)" fg:x="1388" fg:w="5"/><text x="99.5347%" y="559.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.36%)</title><rect x="99.2847%" y="533" width="0.3577%" height="15" fill="rgb(229,52,16)" fg:x="1388" fg:w="5"/><text x="99.5347%" y="543.50"></text></g><g><title>native_write_msr (5 samples, 0.36%)</title><rect x="99.2847%" y="517" width="0.3577%" height="15" fill="rgb(212,155,18)" fg:x="1388" fg:w="5"/><text x="99.5347%" y="527.50"></text></g><g><title>all (1,398 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(242,21,14)" fg:x="0" fg:w="1398"/><text x="0.2500%" y="687.50"></text></g><g><title>perf-exec (5 samples, 0.36%)</title><rect x="99.6423%" y="661" width="0.3577%" height="15" fill="rgb(222,19,48)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="671.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.36%)</title><rect x="99.6423%" y="645" width="0.3577%" height="15" fill="rgb(232,45,27)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="655.50"></text></g><g><title>do_syscall_64 (5 samples, 0.36%)</title><rect x="99.6423%" y="629" width="0.3577%" height="15" fill="rgb(249,103,42)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="639.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.36%)</title><rect x="99.6423%" y="613" width="0.3577%" height="15" fill="rgb(246,81,33)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="623.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.36%)</title><rect x="99.6423%" y="597" width="0.3577%" height="15" fill="rgb(252,33,42)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="607.50"></text></g><g><title>bprm_execve (5 samples, 0.36%)</title><rect x="99.6423%" y="581" width="0.3577%" height="15" fill="rgb(209,212,41)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="591.50"></text></g><g><title>bprm_execve.part.0 (5 samples, 0.36%)</title><rect x="99.6423%" y="565" width="0.3577%" height="15" fill="rgb(207,154,6)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="575.50"></text></g><g><title>exec_binprm (5 samples, 0.36%)</title><rect x="99.6423%" y="549" width="0.3577%" height="15" fill="rgb(223,64,47)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="559.50"></text></g><g><title>search_binary_handler (5 samples, 0.36%)</title><rect x="99.6423%" y="533" width="0.3577%" height="15" fill="rgb(211,161,38)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="543.50"></text></g><g><title>load_elf_binary (5 samples, 0.36%)</title><rect x="99.6423%" y="517" width="0.3577%" height="15" fill="rgb(219,138,40)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="527.50"></text></g><g><title>begin_new_exec (5 samples, 0.36%)</title><rect x="99.6423%" y="501" width="0.3577%" height="15" fill="rgb(241,228,46)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="511.50"></text></g><g><title>perf_event_exec (5 samples, 0.36%)</title><rect x="99.6423%" y="485" width="0.3577%" height="15" fill="rgb(223,209,38)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="495.50"></text></g><g><title>perf_event_enable_on_exec (5 samples, 0.36%)</title><rect x="99.6423%" y="469" width="0.3577%" height="15" fill="rgb(236,164,45)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="479.50"></text></g><g><title>ctx_resched (5 samples, 0.36%)</title><rect x="99.6423%" y="453" width="0.3577%" height="15" fill="rgb(231,15,5)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="463.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.36%)</title><rect x="99.6423%" y="437" width="0.3577%" height="15" fill="rgb(252,35,15)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="447.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.36%)</title><rect x="99.6423%" y="421" width="0.3577%" height="15" fill="rgb(248,181,18)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="431.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.36%)</title><rect x="99.6423%" y="405" width="0.3577%" height="15" fill="rgb(233,39,42)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="415.50"></text></g><g><title>native_write_msr (5 samples, 0.36%)</title><rect x="99.6423%" y="389" width="0.3577%" height="15" fill="rgb(238,110,33)" fg:x="1393" fg:w="5"/><text x="99.8923%" y="399.50"></text></g></svg></svg>